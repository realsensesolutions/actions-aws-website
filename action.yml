name: 'Actions AWS Website'
description: 'Provision all the resource required to host a website in AWS'
inputs:
  name: 
    description: 'Unique identifies for this website on the infra instance'
    required: false
    default: 'empty'
  domain: 
    description: 'Full domain of the website'
    required: false
  content-path:
    description: 'folder to publish as root of the website'
  spa:
    description: 'Enable SPA (Single Page Application) routing support'
    required: false
    default: 'false'
  action: 
    description: "Desire outcome: apply, plan or destroy"
    required: false
    default: "apply"
outputs:
  domain:
    description: "Public reachable domain, this could be the Route53 or CloudDistrubution domain name"
    value: ${{ steps.tf-outputs.outputs.distribution-domain-name }}
runs:
  using: "composite"
  steps:
    - uses: hashicorp/setup-terraform@v3
    - name: init 
      shell: bash
      working-directory: ${{ github.action_path }}
      run: |
        terraform init \
          -backend-config="bucket=${{ env.TF_BACKEND_s3 }}" \
          -backend-config="dynamodb_table=${{ env.TF_BACKEND_dynamodb }}" \
          -backend-config="key=${{ inputs.name }}" 
    - name: search hosted zone domain
      shell: bash
      id: route53
      env: 
        DOMAIN: ${{ inputs.domain }}
      # search the closest hosted zone for example: 
      #  domain:abc.example.com will match a hosted zones with: 
      #  - abc.example.com 
      #  - example.com
      run: |
        HOSTED_ZONE_DOMAIN=$(aws route53 list-hosted-zones --output json | \
          jq -r '.HostedZones[].Name' | \
          awk -v domain=${{ env.DOMAIN }}. '{if (index(domain, $0) != 0) print $0}')
        echo "hosted-zone-domain=$HOSTED_ZONE_DOMAIN" >> $GITHUB_OUTPUT
    - name: run action
      shell: bash
      working-directory: ${{ github.action_path }}
      env: 
        TF_VAR_hosted_zone_domain: ${{ steps.route53.outputs.hosted-zone-domain }}
        TF_VAR_domain: ${{ inputs.domain }}
        TF_VAR_spa: ${{ inputs.spa }}
        ACTION: ${{ inputs.action }}
        # we need to add '-auto-aprove' for apply/destroy
        ACTION_ARGS: ${{ inputs.action != 'plan' && '-auto-approve' || '' }} 
      run: terraform ${{ env.ACTION }} ${{ env.ACTION_ARGS }}
    - name: set outputs
      id: tf-outputs
      if: ${{ inputs.action == 'apply' }}
      working-directory: ${{ github.action_path }}
      shell: bash
      run: |
        terraform output -raw bucket_name
        ACTIONS_AWS_WEBSITE_BUCKET=$(terraform output -raw bucket_name)
        if [ -n "$ACTIONS_AWS_WEBSITE_BUCKET" ]; then 
          echo "ACTIONS_AWS_WEBSITE_BUCKET=$ACTIONS_AWS_WEBSITE_BUCKET" >> $GITHUB_ENV
          echo "domain-bucket=$ACTIONS_AWS_WEBSITE_BUCKET" >> $GITHUB_OUTPUT
        fi
        
        ACTIONS_AWS_DOMAIN=$(terraform output -raw domain)
        if [ -n "$ACTIONS_AWS_DOMAIN" ]; then
          echo "ACTIONS_AWS_DOMAIN=$ACTIONS_AWS_DOMAIN" >> $GITHUB_ENV
          echo "domain=$ACTIONS_AWS_DOMAIN" >> $GITHUB_OUTPUT
        fi

        ACTIONS_AWS_DISTRIBUTION_ID=$(terraform output -raw cloudfront_distribution_id)
        if [ -n "$ACTIONS_AWS_DISTRIBUTION_ID" ]; then
          echo "ACTIONS_AWS_DISTRIBUTION_ID=$ACTIONS_AWS_DISTRIBUTION_ID" >> $GITHUB_ENV
          echo "distribution-id=$ACTIONS_AWS_DISTRIBUTION_ID" >> $GITHUB_OUTPUT
        fi

        ACTIONS_AWS_DISTRIBUTION_DOMAIN_NAME=$(terraform output -raw cloudfront_distribution_domain_name)
        if [ -n "$ACTIONS_AWS_DISTRIBUTION_DOMAIN_NAME" ]; then
          echo "ACTIONS_AWS_DISTRIBUTION_DOMAIN_NAME=$ACTIONS_AWS_DISTRIBUTION_DOMAIN_NAME" >> $GITHUB_ENV
          echo "distribution-domain-name=$ACTIONS_AWS_DISTRIBUTION_DOMAIN_NAME" >> $GITHUB_OUTPUT
        fi
        
    - name: sync content
      if: ${{ inputs.action == 'apply' && inputs.content-path}}
      shell: bash
      env: 
        CONTENT_PATH: ${{ inputs.content-path }}
      run: |
        aws s3 sync ${{ env.CONTENT_PATH }} s3://${{ env.ACTIONS_AWS_WEBSITE_BUCKET }} --delete
        aws cloudfront create-invalidation --distribution-id $ACTIONS_AWS_DISTRIBUTION_ID --paths "/*" 
        